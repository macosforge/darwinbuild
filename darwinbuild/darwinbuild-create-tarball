#!/usr/bin/env python3
#
# Copyright (c) 2017 William Kent. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import sys
import os
import subprocess
import tarfile

if len(sys.argv) < 3:
    print('usage:', sys.argv[0], '/path/to/output project-version', file=sys.stderr)
    exit(1)

def process_submodule(base_path):
    module_files = subprocess.check_output(['git', 'ls-files'], universal_newlines=True, cwd=base_path).split('\n')

    gitmodules_path = os.path.join(base_path, '.gitmodules') if base_path is not None else '.gitmodules'
    if not os.path.isfile(gitmodules_path):
        return module_files

    submodules = []
    with open(gitmodules_path) as fh:
        module_file_lines = fh.read().decode('utf-8').split('\n')
        for line in module_file_lines:
            line = line.strip()
            if line.startswith('path = '):
                submodules.append(line.replace('path = ', ''))

    for module_path in submodules:
        sub_path = os.path.join(base_path, module_path) if base_path is not None else module_path
        for subfile in process_submodule(sub_path):
            module_files.append(os.path.join(module_path, subfile))

    return module_files

outdir = sys.argv[1]
project_and_version = sys.argv[2]

all_files = []
try:
    all_files = process_submodule(None)
except subprocess.CalledProcessError as e:
    print(e.cmd, 'exited with code', e.returncode, file=sys.stderr)
    exit(1)

tarball = tarfile.open(os.path.join(outdir, project_and_version + '.tar.gz'), 'w:gz')

counter = 0
for filename in all_files:
    if filename == '': continue

    counter += 1
    if (counter % 1000) == 0:
        print('Processed', counter, 'files...')

    tarball.add(filename, os.path.join(project_and_version, filename))

tarball.close()
