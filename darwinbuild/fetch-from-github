#!/usr/bin/python

from __future__ import print_function
import sys, os
import plistlib
import subprocess
import tarfile
import tempfile
import shutil

if len(sys.argv) < 5:
    print('Internal tool used by darwinbuild, please do not invoke directly', file=sys.stderr)
    exit(1)

plist_filename = sys.argv[1]
project_name = sys.argv[2]
project_version = sys.argv[3]
sources_dir = sys.argv[4]
darwinbuild_plist = plistlib.readPlist(plist_filename)

project_data = darwinbuild_plist['projects'][project_name]
if 'github' in project_data:
    url = None
    tag = project_version
    repo_basename = None

    github_data = project_data['github']

    if isinstance(github_data, str):
        repo_parts = github_data.split('/')
        repo_basename = repo_parts[1]
        url = 'https://github.com/{}/archive/{}.tar.gz'.format(github_data, project_version)
    elif isinstance(github_data, dict):
        repo_parts = github_data['repo'].split('/')
        repo_basename = repo_parts[1]
        url = 'https://github.com/{}/archive/{}.tar.gz'.format(github_data['repo'], github_data['tag'])
        tag = github_data['tag']
    else:
        raise Exception('github data not string or dictionary')

    tarball_filename = project_name + '-' + project_version + '.tar.gz'
    download_path = os.path.join(sources_dir, tarball_filename)
    print('Downloading', url, '...')
    curl_exitcode = subprocess.call(['/usr/bin/curl', '-fLs', '-o', download_path, url])
    if curl_exitcode != 0:
        # This occurs if the server returned a 404 or other error.
        exit(1)

    if repo_basename != project_name or tag != project_version:
        temp_dir = tempfile.mkdtemp(prefix='darwinbuild-fetch-from-github')
        subprocess.check_output(['/usr/bin/tar', 'xf', os.path.join(sources_dir, tarball_filename)], cwd=temp_dir)
        shutil.move(os.path.join(temp_dir, repo_basename + '-' + tag), os.path.join(temp_dir, project_name + '-' + project_version))
        subprocess.check_output(['/usr/bin/tar', 'czf', os.path.join(sources_dir, tarball_filename), project_name + '-' + project_version], cwd=temp_dir)
        shutil.rmtree(temp_dir, ignore_errors=True)
